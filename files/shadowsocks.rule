#!/bin/sh

EXT_ARGS=""

usage() {
	cat <<-EOF
		Usage: ss-rules [options]

		Valid options are:

		    -s <server_host>        hostname or ip of shadowsocks remote server
		    -l <local_port>         port number of shadowsocks local server
		    -c <config_file>        config file of shadowsocks
		    -i <ignore_list_file>   config file of ignore list
		    -e <extra_options>      extra options of iptables
		    -f                      flush the rules
EOF
}

get_ip() {
	nslookup $1 114.114.114.114 | \
	grep -v "114.114.114.114" | \
	awk '{ip[NR]=$3}\
		END{for(i=NR;i>0;i--)\
			{if(ip[i] ~ /^([0-9]{1,3}\.){3}[0-9]{1,3}$/)\
				{print ip[i];break;}}}'
}

flush_r() {
	local IPT

	while true; do
		IPT=$(iptables-save | grep "^-A PREROUTING")
		if [ -z "$IPT" ]; then
			sleep 1
			continue
		fi
		eval $(echo "$IPT" | grep "shadowsocks" | \
			sed 's#^-A#-D#g' | awk '{printf("iptables -t nat %s;\n",$0)}')
		if echo "$IPT" | grep -q "SHADOWSOCKS"; then
			iptables -t nat -D PREROUTING -p tcp -j SHADOWSOCKS
			iptables -t nat -F SHADOWSOCKS>/dev/null 2>&1 && \
			iptables -t nat -X SHADOWSOCKS
		fi
		break
	done

	if command -v ipset>/dev/null 2>&1; then
		ipset -X shadowsocks>/dev/null 2>&1
		return 0
	fi
	return 1
}

iptab_r() {
	local BODY=$(echo -e "$IPLIST" | \
		awk '$1 ~ /^([0-9]{1,3}\.){3}[0-9]{1,3}/ \
			{printf("-A SHADOWSOCKS -d %s -j RETURN\n", $1)}')

	iptables-restore -n <<-EOF
		*nat
		:SHADOWSOCKS - [0:0]
		$BODY
		-A SHADOWSOCKS -p tcp $EXT_ARGS -j REDIRECT --to-ports $LOCAL_PORT
		-A PREROUTING -p tcp -j SHADOWSOCKS
		COMMIT
EOF
	exit $?
}

ipset_r() {
	local BODY=$(echo -e "$IPLIST" | \
		awk '$1 ~ /^([0-9]{1,3}\.){3}[0-9]{1,3}/ \
			{printf("add shadowsocks %s\n", $1)}')

	echo -e "create shadowsocks hash:net\n$BODY" | ipset -R && \
	iptables -t nat -A PREROUTING -p tcp $EXT_ARGS \
		-m set ! --match-set shadowsocks dst \
		-j REDIRECT --to-ports $LOCAL_PORT

	return $?
}

while getopts ":s:l:c:i:e:f" arg; do
	case $arg in
		s)
			SERVER=$OPTARG
			;;
		l)
			LOCAL_PORT=$OPTARG
			;;
		c)
			CONFIG=$OPTARG
			;;
		i)
			IGNORE=$OPTARG
			;;
		e)
			EXT_ARGS="$EXT_ARGS $OPTARG"
			;;
		f)
			flush_r
			exit 0
			;;
	esac
done

if [ -f "$CONFIG" ]; then
	eval $(awk -F'[,:]' '{
		for (i=1; i<=NF; i++) {
			if ($i ~ /"server"/)
				{printf("server=%s;", $(i+1))}
			if ($i ~ /"local_port"/)
				{printf("local_port=%s;", $(i+1))}
		}
	}' $CONFIG | tr -d '" ')
fi

: ${SERVER:=$server}
: ${LOCAL_PORT:=$local_port}

if [ -z "$SERVER" ] || [ -z "$LOCAL_PORT" ]; then
	usage
	exit 2
fi

if !(echo "$SERVER" | grep -qE "^([0-9]{1,3}\.){3}[0-9]{1,3}$"); then
	echo "The $SERVER is not ip, trying to resolve it."
	SERVER=$(get_ip $SERVER)
	[ -z "$SERVER" ] && exit 1
	echo "Server IP: $SERVER."
fi

IPLIST="$SERVER\n0.0.0.0/8\n10.0.0.0/8
127.0.0.0/8\n169.254.0.0/16\n172.16.0.0/12
192.168.0.0/16\n224.0.0.0/4\n240.0.0.0/4"

if [ -f "$IGNORE" ]; then
	IPLIST="$IPLIST\n$(cat $IGNORE)"
fi

flush_r && ipset_r || iptab_r

exit $?
